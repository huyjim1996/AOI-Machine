<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="FB_RTCVision" Id="{401919f6-551f-4fe1-9f5a-e582c33ee3cf}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM FB_RTCVision
VAR
	bFirstCycle 						: BOOL := TRUE;				(* First cycle bit *)		
	sName 								: STRING;					(* TCP/IP device name for other utilities *)	
	
	(* Internal status *)   			
	bActive								: BOOL;						(* TCP/IP device initialized and ready to work *)
	bBusy								: BOOL;						(* TCP/IP device is currently proccesing *)
	bError								: BOOL;						(* Error occured while executing *)
	iErrorID 							: UDINT;					(* Error ID*)
	
	(* Function blocks *)
	fbTcpClient 						: FB_TcpClient;				(* FB to create client connection*)
	
	(* Messages buffers *)
	stSendData							: ST_TcpBufferData;		(*  *)
	stReciveData 						: ST_TcpBufferData;		(*  *)
	
	(* Temporary messeges *)
	sSendMessage 						: STRING;				(*  *)
	sReciveMessage						: STRING(1000);			(*  *)
	arrBufferMessage					: ARRAY[0..10] OF STRING;
	iMessageIndex	 					: INT;	
	sNewLine							: STRING := '$R$L';
	
	(* State machine *)
	eCameraState		 				: E_RTCCameraState;			(* Current state of Camera connection *)
	eCameraInitState					: E_RTCCameraInitState;		(* Current state of Camera initialization *)
//	eCameraMethodState					: E_RTCCameraMethodState;
//	eCameraGetPositionState				: E_RTCCameraGetPositionState;
//	eCameraGetValuesState				: E_RTCCameraGetValuesState;

	(* Rising edge trigger *)
	rtError								: R_TRIG; 					(* Rising edge trigger for function block error *)
	
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* First cycle procedure *)
IF bFirstCycle THEN
	bFirstCycle := FALSE;	
		
END_IF

bActive := eCameraState >= RTC_READY;

(* Report errors that occur *)
rtError(CLK:=bError);

IF rtError.Q THEN 
	fbMachineLogger.MR_AddLogs(FUN_MergeStrings5(sName, ' : Error occured (error ID: ', UDINT_TO_STRING(iErrorID), ')', ''));

END_IF

(* Execute TCP/IP FB and timers *)
fbTcpClient();

(* Execute state machine *)
StateMachine();]]></ST>
    </Implementation>
    <Folder Name="StateMachine" Id="{c7ae766c-ce62-4967-8abd-12db5024d97b}" />
    <Method Name="MS_Initializing" Id="{204bd956-64b3-4e96-92b4-37bbb79dcc6b}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD PROTECTED MS_Initializing
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE eCameraInitState OF
	RTC_INIT_CONNECTION:
		fbTcpClient.MR_Init();
		
		IF fbTcpClient.Active THEN
			eCameraInitState := RTC_INIT_CLEAR_BUFFER;	
			
		ELSIF fbTcpClient.Error THEN
			bError := TRUE;
			iErrorID := fbTcpClient.ErrorID;
			
		END_IF
		
	RTC_INIT_CLEAR_BUFFER:
		fbTcpClient.MR_ClearAllBuffers();
		eCameraInitState := RTC_INIT_WAIT_FOR_USERNAME;
		
		IF fbTcpClient.Error THEN
			bError := TRUE;
			iErrorID := fbTcpClient.ErrorID;
			
		END_IF
	
	RTC_INIT_WAIT_FOR_USERNAME:
		eCameraInitState := RTC_INIT_WRITE_USER;
		
	RTC_INIT_WRITE_USER:
		eCameraInitState := RTC_INIT_WAIT_FOR_PASSWORD;
		
	RTC_INIT_WAIT_FOR_PASSWORD:
		eCameraInitState := RTC_INIT_WRITE_PASSWORD;
		
	RTC_INIT_WRITE_PASSWORD:
		eCameraInitState := RTC_INIT_WAIT_FOR_CONFIRMATION;
		
	RTC_INIT_WAIT_FOR_CONFIRMATION:
		stReciveData := fbTcpClient.NextRecivedMessage;
		
		IF stReciveData.iLength >0 THEN
			MEMSET(ADR(sReciveMessage),0,SIZEOF(sReciveMessage));
			FUN_TcpBufferDataToString(ADR(stReciveData),ADR(sReciveMessage));
			
			IF sReciveMessage = 'User Logged In$R$L' THEN		
				eCameraInitState := RTC_INIT_DONE;			
			END_IF			
		END_IF
	
	RTC_INIT_DONE:
		eCameraInitState := RTC_INIT_CONNECTION;
		eCameraState := RTC_READY;
	
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="MS_Uninitialized" Id="{360ba870-9803-418c-bfe8-5b2f45c81789}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD PROTECTED MS_Uninitialized
]]></Declaration>
      <Implementation>
        <ST><![CDATA[;]]></ST>
      </Implementation>
    </Method>
    <Method Name="StateMachine" Id="{711dbc96-48e0-41bf-9791-eab94cc8d48a}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD PROTECTED StateMachine]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE eCameraState OF
	RTC_UNINITIALIZED:
	
	
END_CASE]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_RTCVision">
      <LineId Id="20" Count="3" />
      <LineId Id="5" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="27" Count="6" />
      <LineId Id="26" Count="0" />
      <LineId Id="46" Count="1" />
      <LineId Id="49" Count="2" />
      <LineId Id="45" Count="0" />
    </LineIds>
    <LineIds Name="FB_RTCVision.MS_Initializing">
      <LineId Id="5" Count="1" />
      <LineId Id="8" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="10" Count="6" />
      <LineId Id="9" Count="0" />
      <LineId Id="17" Count="1" />
      <LineId Id="21" Count="6" />
      <LineId Id="20" Count="0" />
      <LineId Id="28" Count="2" />
      <LineId Id="38" Count="14" />
      <LineId Id="54" Count="1" />
      <LineId Id="57" Count="1" />
      <LineId Id="56" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="32" Count="1" />
      <LineId Id="59" Count="1" />
      <LineId Id="37" Count="0" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="FB_RTCVision.MS_Uninitialized">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_RTCVision.StateMachine">
      <LineId Id="5" Count="1" />
      <LineId Id="8" Count="1" />
      <LineId Id="7" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>